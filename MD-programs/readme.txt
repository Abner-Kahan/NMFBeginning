BinaryMultiGenerator3 generates .npy files that contain decompositions for various sugars into various components. One can adjust the sugarList to apply NMF decomposition to a different range of sugars, each of which needs to have their number of residues specified in residueCount List.

[A full list of available sugars are found in the VMD subdirectory which contains distance maps for sugars with 1's being represented if two residues are within 4.5 Angstrom of another residue. Those are labeled as 45d.txt]
One could also adjust the number of components tested for the decompositions, in the list for which k iterates through. NMF hyper parameters can be adjusted in the NMFmap function.
This program generates labeled .npy files containing the word ProCompons to represent the residues maps of the glycans, and TempCompons to represent the degree to which the interactions fluctuate over time. The name of the spy files also contains the sugar and the number of NMF components.
Examples of the decompositions are found in MD decomposs subdirectory in this folder.

AnalyzeMultiResidues allows one to select a sugar from a previous collections of NMF decomposition stored in npy files. To select the sugar, one changes the value of sugar to the name of the sugar (i.e. 'n2f') and the numNMF to the number of residues of the decomposition (any value from 2-9).
The first figure outputted is a heat map correlating the values of the components. This helps detect redundant components with a high index of correlation. The function then outputs two figures for each component. The first figure is a moving average of each component over the frames. The granularity can be adjusted by modifying the lines after H3 is initialized. The second value for the moveAverage value can de decreased to get more detail, but H3 should also be decreased in size to that value -1.
The second figure for each component is a heat map showing the important non-self interactions between residues composing that component. After those figures are finished showing, a final figure is outputted showing the percentage of each component throughout the course of the trajectory.

kmeansBinary generates figures specific to a sugar which indicate the optimal number of clusters to reduce error. One changes the text file in the line containing pm= to change the sugar. One could change MaxTestCase to increase the number of cases one iterates through, and are displayed in the figure, though this may take more time for the program to run. The first figure shows the mean squared error for the number of clusters. One is trying to look for an inflection point in the graph which represents diminishing returns in adding more clusters. Adding more clusters automatically reduces error but adding extraneous cluster may create issues with data analysis. The next figure is the silhouette squared error, another way of validating the number of clusters.

k-meansDistance runs k-mean clustering on a sugar. One choose the sugar by changing the file name on the line specifying mapco, as well as the number of residues for that sugar on the same line. For the next line,  wss, on can change the number of clusters. The function calculate_Ws determines what are the centers of every cluster, fits every point to a clusters,  which can be correlated with the other MD simulations, and the calculates the error for each assignment. The plotting and graphing is left up to the user. 

